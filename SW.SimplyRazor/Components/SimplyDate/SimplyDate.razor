@namespace SW.SimplyRazor
@implements IDisposable
@inject IJSRuntime JSRuntime

<input id="@Id" @ref="inputRef" disabled="@Disabled" @attributes="UnmatchedAttributes" />

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public DateMode Mode { get; set; }

    [Parameter]
    public object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    ElementReference inputRef;
    object inputValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == null) Id = $"dt_{Guid.NewGuid().ToString("N")}";

            await JSRuntime.InvokeVoidAsync("simplyDateInterop.init",
                inputRef,
                DotNetObjectReference.Create(this),
                Id,
                Value,
                Mode.ToString().ToLower());
        }
        else
        {
            var dates = await JSRuntime.InvokeAsync<DateTime[]>("simplyDateInterop.getDate", Id);

            if (Value == null && dates.Length > 0)
                await JSRuntime.InvokeVoidAsync("simplyDateInterop.clear", Id);
            else if (Value != null && Mode == DateMode.Single && (dates.Length == 0 || (DateTime)Value != dates[0]))
                await JSRuntime.InvokeVoidAsync("simplyDateInterop.setDate", Id, Value);
        }
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    [JSInvokable]
    async public Task OnValueUpdate(DateTime[] selectedDates)
    {
        if (Mode == DateMode.Single)
            if (selectedDates.Length > 0)
                await ValueChanged.InvokeAsync(selectedDates[0].ToLocalTime().ChangeKind());
            else
                await ValueChanged.InvokeAsync(null);
        else
            await ValueChanged.InvokeAsync(selectedDates.Select(i => i.ToLocalTime().ChangeKind()).ToArray());
    }

    //async Task OnChange(ChangeEventArgs args)
    //{
    //    //if (Mode == DateMode.Single)
    //    //{
    //    //    if (string.IsNullOrWhiteSpace(args.Value.ToString()))
    //    //        await JSRuntime.InvokeVoidAsync("simplyDateInterop.clear", Id);
    //    //    else
    //    //        await JSRuntime.InvokeVoidAsync("simplyDateInterop.setDate", Id, args.Value);
    //    //}
    //}

    //[JSInvokable]
    //async public Task OnChange(DateTime[] selectedDates)
    //{
    //    //if (selectedDates.Length > 0)
    //    //    await ValueChanged.InvokeAsync(selectedDates[0]);
    //    //else
    //    //    await ValueChanged.InvokeAsync(null);
    //}

    void IDisposable.Dispose()
    {
        JSRuntime.InvokeVoidAsync("simplyDateInterop.destroy", Id);
    }
}
