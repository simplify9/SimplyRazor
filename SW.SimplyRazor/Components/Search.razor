@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@implements ISimplySearchCommand
@inject NotifyService notify
@inject IServiceProvider serviceProvider

<CascadingValue IsFixed="true" Value="this" Name="Search">
    <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
        <CascadingValue IsFixed="true" Value="FieldRole.Filter" Name="RenderMode">
            @Filters
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

<Ready Value="internalValue != null && internalValue.Conditions.Count > 0">
    <IsReady>
        @{
            int index = 0;
            var filters = internalValue.Conditions.First().Filters;
            foreach (var filter in filters)
            {
                var f1 = filter;
                SimplySearchFilterSetup setup = null;

                if (f1.Field != null)
                    filterSetups.TryGetValue(f1.Field, out setup);

                <div class="row mb-2">
                    <div class="input-group col-6">
                        <div class="input-group-prepend">
                            <SimplySelect Value="filter.Field"
                                          ValueChanged="value => OnFilterChange(filter, value)"
                                          EmptyText="select"
                                          Items="filterSetups.ToDictionary(k => k.Key, v => v.Value.Text)"
                                          TKey="string"
                                          class="form-control" />
                        </div>
                        <SimplySelect Value="(int)filter.Rule"
                                      ValueChanged="value => OnRuleChange(filter, value)"
                                      Items="setup?.CompactRules ?? new Dictionary<string, string>()"
                                      TKey="int"
                                      class="form-control"
                                      style="max-width: 90px" />
                        <SimplyForm @bind-Value="f1">

                            @switch (setup?.Type)
                                {
                                    case SearchyDataType.Number:
                                    <Field Name="ValueDecimal" Text="" Lookup="@setup.Lookup" />
                                        break;

                                    case SearchyDataType.Date:

                                        if (filter.Rule == SearchyRule.Range)
                                        {
                                        <Field Name="ValueDateTimeArray" Text="" />
                                        }
                                        else
                                        {
                                        <Field Name="ValueDateTime" Text="" InputType="InputType.Calendar" />
                                        }

                                        break;


                                    case SearchyDataType.Text:
                                    <Field Name="ValueString" Text="" Lookup="@setup.Lookup" TypeAhead="@setup.TypeAhead" />
                                        break;

                                    default:
                                    <Field Name="Value" Text="" />
                                        break;
                                }

                        </SimplyForm>

                        <div class="input-group-append">

                            @if (index == filters.Count - 1)
                            {
                                <button @onclick="() => filters.Add(new SearchyFilter())" class="btn btn-outline-secondary " type="button">+</button>
                            }
                            else
                            {
                                <button @onclick="() => filters.Remove(filter)" class="btn btn-outline-secondary " type="button">x</button>
                            }

                        </div>

                    </div>
                    @if (index == 0)
                    {
                        <div class="col-auto pl-0">
                            <BusyButton OnClick="bb => DoSearch(0, bb)" class="btn btn-primary" style="width: 80px">
                                <Title>
                                    Search
                                </Title>
                            </BusyButton>

                            @if (Commands != null)
                            {
                                @Commands(this)
                            }
                        </div>
                    }
                </div>

                index++;
            }

            if (result != null && result.Result.Count() > 0)
            {
                <div class="mb-3 mt-4">
                    <SimplyTable Value="result.Result" 
                                 Height="@Height" Width="@Width" 
                                 Type="typeof(TModel)" 
                                 OnItem="ti => OnTableItem(ti)" 
                                 Columns="Columns" />
                </div>
                <Pager TotalCount="result.TotalCount" Count="result.Result.Count()" Page="internalValue.PageIndex" PageSize="PageSize" PageChanged="page => DoSearch(page)"></Pager>
            }
        }
    </IsReady>
</Ready>

@code{

    [Parameter]
    public IBasicApiClient ApiClient { get; set; }

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<ISimplySearchCommand> Commands { get; set; }

    [Parameter]
    public EventCallback<TableItem<TModel>> OnItem { get; set; }

    [Parameter]
    public object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    SearchyResponse<TModel> result;
    SearchyRequest internalValue;

    async protected override Task OnParametersSetAsync()
    {
        if (internalValue != null && internalValue.Equals(Value)) return;

        internalValue = (SearchyRequest)((SearchyRequest)Value)?.Clone();

        if (internalValue == null)
        {
            internalValue = new SearchyRequest
            {
                PageSize = PageSize,
            };

            var conditions = internalValue.Conditions;
            if (conditions.Count == 0)
                conditions.Add(new SearchyCondition());

            var filters = conditions.First().Filters;
            if (filters.Count == 0)
                filters.Add(new SearchyFilter());
        }

        await DoSearch(internalValue.PageIndex);
    }

    Task OnTableItem(TableItem tableItem)
    {
        return OnItem.InvokeAsync(new TableItem<TModel>
        {
            Flag = tableItem.Flag,
            Item = (TModel)tableItem.Item
        });
    }

    void OnRuleChange(SearchyFilter filter, int rule)
    {
        filter.Rule = (SearchyRule)rule;
        filter.Value = null;
    }

    void OnFilterChange(SearchyFilter filter, string value)
    {
        filter.Field = value;
        filter.Value = null;

        if (filter.Field == null)
            filter.Rule = default;
        else
            filter.Rule = (SearchyRule)int.Parse(filterSetups[filter.Field].CompactRules.First().Key);
    }

    async Task DoSearch(int page, IBusyButton bb = null)
    {
        internalValue.PageIndex = page;
        var newValue = (SearchyRequest)internalValue.Clone();

        var apiClient = serviceProvider.GetApiClient(ApiClient);
        var apiResult = await apiClient.Search<TModel>($"{SearchUrl}?{newValue.ToString()}");
        if (await notify.NotifyOnApiResult(apiResult) && apiResult.Response.Result.Count() == 0)
            await notify.Publish(new UserMessage { Body = "No results.", Level = AlertLevel.Info });

        result = apiResult.Response;

        await ValueChanged.InvokeAsync(newValue);
        if (bb != null) await bb.SetBusy(false);
    }

    IDictionary<string, SimplySearchFilterSetup> filterSetups = new Dictionary<string, SimplySearchFilterSetup>(StringComparer.OrdinalIgnoreCase);

    async public Task AddFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetups.Add(filter.Field, filter);
        await InvokeAsync(() => StateHasChanged());
    }

    public void RemoveFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetups.Remove(filter.Field);
    }

    public SearchyRequest SearchyRequest => (SearchyRequest)internalValue.Clone();

}
