@typeparam TKey
@namespace SW.SimplyRazor
@inject IServiceProvider serviceProvider
@inject NotifyService notify

@using System.Collections
@using Humanizer

<select @onchange="SelectValueChanged" @attributes="UnmatchedAttributes">

    @if (EmptyText != null)
    {
        <option selected="@(Value == null || Value.Equals(default(TKey) ))" value=" ">@EmptyText</option>
    }

    @if (Items == null)
    {
        <option>loading...</option>
    }
    else
    {
        int index = 1;

        foreach (object itemUntyped in Items)
        {
            object key = null;
            object value = null;
            var enumerableType = itemUntyped.GetType();

            if (enumerableType == typeof(string) && typeof(TKey) == typeof(string))
            {
                key = itemUntyped;
                value = itemUntyped;
            }
            else if (enumerableType == typeof(string))
            {
                key = index;
                value = itemUntyped;
            }
            else if (enumerableType.BaseType == typeof(Enum))
            {
                key = itemUntyped;
                value = ((Enum)itemUntyped).Humanize();
            }
            else
            {
                key = ((KeyValuePair<string, string>)itemUntyped).Key;
                value = ((KeyValuePair<string, string>)itemUntyped).Value;
            }

            <option selected="@(Value != null && Value.ToString() == key.ToString() )" value="@key">@value</option>

            index++;
        }
    }

</select>

@code {

    [Parameter]
    public TKey Value { get; set; }

    [Parameter]
    public EventCallback<TKey> ValueChanged { get; set; }

    [Parameter]
    public IEnumerable Items { get; set; }

    [Parameter]
    public EventCallback<IEnumerable> ItemsChanged { get; set; }

    [Parameter]
    public Lookup Lookup { get; set; }

    [Parameter]
    public string EmptyText { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    async protected override Task OnParametersSetAsync()
    {
        var nakedType = Nullable.GetUnderlyingType(typeof(TKey)) ?? typeof(TKey);

        if (Items == null && nakedType == typeof(Enum))
        {
            var lst = new List<KeyValuePair<TKey, string>>();
            foreach (var item in Enum.GetValues(nakedType))
            {
                lst.Add(new KeyValuePair<TKey, string>((TKey)item, Enum.GetName(nakedType, item).Humanize()));
            }
            Items = lst;
        }

        if (Lookup != null)
        {
            var apiClient = serviceProvider.GetApiClient();
            var result = await apiClient.Search(Lookup.ApplySearch());
            if (await notify.NotifyOnApiResult(result)) 
                Items = result.Response;
        }
    }

    async Task SelectValueChanged(ChangeEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Value.ToString()))
        {
            Value = default(TKey);
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(string))
        {
            Value = (TKey)args.Value;
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(int))
        {
            Value = (TKey)(object)int.Parse(args.Value.ToString());
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey).BaseType == typeof(Enum))
        {
            Value = (TKey)(object)Enum.Parse(typeof(TKey), args.Value.ToString());
            await ValueChanged.InvokeAsync(Value);
        }
        else if (typeof(TKey) == typeof(object))
        {
            Value = (TKey)args.Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }

}
