@typeparam TModel
@namespace SW.SimplyRazor
@implements ISimplySearch
@implements IComponentAction
@inject NotifyService notify
@inject NavigationManager navigationManager
@inject ApiService apiService
@inject IJSRuntime JSRuntime
@inject ComponentOptions componentOptions
@using SW.PrimitiveTypes

<CascadingValue IsFixed="true" Value="this" Name="Search">
    <CascadingValue IsFixed="true" Value="typeof(TModel)" Name="ModelType">
        <CascadingValue IsFixed="true" Value="FieldRole.Filter" Name="RenderMode">
            @Filters
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

<SimplyQuery QueryUrl="@FilterUrl" @bind-Working="filterQueryBusy" OnResult="OnFilterQueryResult" TResponse="IEnumerable<SearchyFilterSetup>"></SimplyQuery>
<SimplyQuery QueryUrl="@query" @bind-Working="searchQueryBusy" OnResult="OnSearchQueryResult" TResponse="SearchyResponse<TModel>"></SimplyQuery>
@{
    int index = 0;

    foreach (var filter in filters)
    {

        var f1 = filter;

        <div class="row mb-2" @key="filter">
            <div class="input-group col-6">
                <div class="input-group-prepend">
                    <SimplySelect ValueChanged="((value) => OnFilterChange(filter, value))"
                                  EmptyText="select"
                                  Items="@(filterSetup.ToDictionary(k => k.Field, v => v.Text))"
                                  TKey="string"
                                  class="form-control" />

                </div>
                <SimplySelect Value="(int)filter.Rule"
                              ValueChanged="((value) => OnRuleChange(filter, value))"
                              Items="filter.CompactRules"
                              TKey="int"
                              class="form-control"
                              style="max-width: 90px" />

                <SimplyForm TModel="FilterModel" @bind-Value="f1">

                    @switch (filter.Type)
                    {
                        case SearchyDataType.Number:

                            <Field Name="ValueDecimal" Text="" Lookup="@filter.Lookup" />

                            break;

                        case SearchyDataType.Date:

                            if (filter.DateMode == DateMode.Single)
                            {
                                <Field Name="ValueDateTime" Text="" InputType="InputType.Calendar" />
                            }
                            else
                            {
                                <Field Name="ValueDateTimeArray" Text=""  />
                            }

                            break;

                        default:

                            if (filter.Lookup == null)
                            {
                                <Field Name="ValueString" Text="" />
                            }
                            else
                            {
                                <Field Name="ValueString" Text="" Lookup="@filter.Lookup" TypeAhead="@filter.TypeAhead" />
                            }

                            break;

                    }
                </SimplyForm> 

                <div class="input-group-append">

                    @if (index == filters.Count - 1)
                    {
                        <button @onclick="@(e => AddFilter())" class="btn btn-outline-secondary " type="button">+</button>
                    }
                    else
                    {
                        <button @onclick="@(e => RemoveFilter(filter))" class="btn btn-outline-secondary " type="button">x</button>
                    }

                </div>

            </div>
            @if (index == 0)
            {
                <div class="col-auto pl-0">
                    <button type="button" @onclick="() => Search(0)" class="btn btn-primary" style="width: 80px">
                        @if (filterQueryBusy || searchQueryBusy)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            @:Search
                        }
                    </button>

                    @if (Commands != null)
                    {
                        @Commands(this)
                    }
                </div>
            }
        </div>

        index++;

    }
}


@if (result != null && result.Result.Count() > 0)
{
    <div class="mb-3">
        <SimplyGridNonGeneric Data="result.Result" RowClicked="GridRowClicked" Height="@Height" Width="@Width">
            @Columns
        </SimplyGridNonGeneric>
    </div>
    <SimplyPager TotalCount="result.TotalCount" Count="result.Result.Count()" Page="page" PageSize="PageSize" PageChanged="page => Search(page)"></SimplyPager>
}

@code{

    [Parameter]
    public string SearchUrl { get; set; }

    [Parameter]
    public string FilterUrl { get; set; }

    [Parameter]
    public string ExportUrl { get; set; }

    [Parameter]
    public RenderFragment Filters { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public RenderFragment<IComponentAction> Commands { get; set; }

    [Parameter]
    public EventCallback<TModel> RowClicked { get; set; }

    List<FilterModel> filters = new List<FilterModel>()
    {
        new FilterModel()
    };

    List<SimplySearchFilterSetup> filterSetup = new List<SimplySearchFilterSetup>();
    bool searchQueryBusy;
    bool filterQueryBusy;
    int page;
    SearchyResponse<TModel> result;
    string query;

    void AddFilter()
    {
        filters.Add(new FilterModel());
    }

    void OnRuleChange(FilterModel filter, int rule)
    {
        filter.Rule = (SearchyRule)rule;
        if (filter.Rule == SearchyRule.Range)
        {
            filter.DateMode = DateMode.Range;
            filter.ValueDateTime = null;
        }
        else
        {
            filter.DateMode = DateMode.Single;
            filter.ValueDateTimeArray = null;
        }

    }

    void OnFilterChange(FilterModel filter, string value)
    {
        filter.Field = value;
        filter.ValueString = null;
        filter.ValueStringArray = null;
        filter.ValueDecimal = null;
        filter.ValueDecimalArray = null;
        filter.ValueDateTime = null;
        filter.ValueDateTimeArray = null;
        filter.Rule = default;

        var selectedFilterSetup = filterSetup.Where(fs => fs.Field == value).FirstOrDefault();
        if (selectedFilterSetup == null)
        {
            filter.Rules = new List<SearchyRule>();
        }
        else
        {
            filter.Rule = selectedFilterSetup.Rules.First();
            filter.Rules = selectedFilterSetup.Rules;
            filter.Type = selectedFilterSetup.Type;
            filter.Lookup = selectedFilterSetup.Lookup;
            filter.TypeAhead = selectedFilterSetup.TypeAhead;

        }

        
    }

    void RemoveFilter(FilterModel filter)
    {
        //if (filter.Required)
        //    await notify.Publish(new UserMessage { Body = "This filter is required for search.", Level = AlertLevel.Warning });
        //else
        filters.Remove(filter);
    }

    void Search(int page)
    {

        var searchRequest = new SearchyRequest(new SearchyCondition(GetFilledFilters()))
        {
            PageSize = PageSize,
            PageIndex = page
        };

        query = $"{SearchUrl}?{searchRequest.ToString()}";
        this.page = page;
    }

    async public Task AddFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetup.Add(filter);
        //if (filter.Default || filter.Required) filters.Add(new FilterModel(filter));
        await InvokeAsync(() => StateHasChanged());
    }

    async Task OnFilterQueryResult(ApiResult<IEnumerable<SearchyFilterSetup>> apiResult)
    {
        if (apiResult.Success)
        {
            //foreach (var fc in apiResult.Response)

            //    await AddFilterSetup(fc);
        }
    }

    public void RemoveFilterSetup(SimplySearchFilterSetup filter)
    {
        filterSetup.Remove(filter);
    }

    Task GridRowClicked(object model)
    {
        return RowClicked.InvokeAsync((TModel)model);
    }

    async Task OnSearchQueryResult(ApiResult<SearchyResponse<TModel>> apiResult)
    {
        if (apiResult.Success)
        {
            if (apiResult.Response.Result.Count() == 0)
            {
                await notify.Publish(new UserMessage { Body = "Search returned no results.", Level = AlertLevel.Info });
            }
            result = apiResult.Response;
        }

        query = null;
    }

    async public Task Invoke(string actionName, object actionValue)
    {
        switch (actionName.ToLower())
        {
            case "exporttoexcel":

                var searchRequest = new SearchyRequest(new SearchyCondition(GetFilledFilters()));

                var result = await apiService.PostAsync<RemoteBlob>(ExportUrl, searchRequest);

                if (result.Success)
                {
                    if (result.Response.Location.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                        await JSRuntime.DownloadFile(result.Response.Location, result.Response.Name);

                    else

                        await JSRuntime.DownloadFile($"{componentOptions.BlobsUri.ToString()}{result.Response.Location}", result.Response.Name);
                }

                break;

            default:

                break;
        }
    }

    IEnumerable<FilterModel> GetFilledFilters()
    {
        return filters.Where(filter =>
            (filter.ValueDateTime != null ||
            filter.ValueDateTimeArray != null ||
            filter.ValueDecimal != null ||
            filter.ValueDecimalArray != null ||
            filter.ValueString != null ||
            filter.ValueStringArray != null)
                && !string.IsNullOrEmpty(filter.Field)
                && filter.Rule!=default);
    }

}
