@namespace SW.SimplyRazor
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject IServiceProvider serviceProvider
@inject NotifyService notify

<select id="@Id" @ref="inputRef" @attributes="UnmatchedAttributes">
    @*<option value="0" selected disabled>Please enter your address.</option>*@
</select>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public Lookup Lookup { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public int TypeAhead { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UnmatchedAttributes { get; set; }

    ElementReference inputRef;
    bool internalSetValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == null) Id = $"dt_{Guid.NewGuid().ToString("N")}";

            await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.init",
                inputRef,
                DotNetObjectReference.Create(this),
                Id,
                TypeAhead == 0 ? 1 : TypeAhead,
                Placeholder);

            if (TypeAhead == 0)
            {
                await PopulateChoices(Lookup.ApplySearch());
            }
        }

        var controlValue = await JSRuntime.InvokeAsync<string>("simplyChoicesInterop.getValue", Id);

        if (Value != controlValue)
        {
            if (TypeAhead > 0 && Value != default)
            {
                var apiClient = serviceProvider.GetApiClient();
                var result = await apiClient.LookupValue(Lookup.ApplyValue(Value));
                await notify.NotifyOnApiResult(result);
                if (result.Success)
                    await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.setChoices", Id, new[] { new { Key = Value, Value = result.Response, selected = true } }, "key", "value");
            }
            else if (Value != default)
            {
                await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.setChoice", Id, Value);
            }
        }


        if (Disabled) await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.disable", Id);
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    Debouncer StepperDeboucer = new Debouncer(); // one second

    [JSInvokable]
    async public Task OnSearch(string value, int resultCount)
    {
        if (TypeAhead > 0)
            await StepperDeboucer.Debouce(async () =>
                await InvokeAsync(async () =>
                    await PopulateChoices(Lookup.ApplySearch(value))));
    }

    [JSInvokable]
    async public Task OnChange(string value)
    {
        await ValueChanged.InvokeAsync(value);
    }

    async Task PopulateChoices(string url)
    {
        var apiClient = serviceProvider.GetApiClient();
        var apiResult = await apiClient.Search(url);
        await notify.NotifyOnApiResult(apiResult);
        if (apiResult.Success)
        {
            await JSRuntime.InvokeVoidAsync("simplyChoicesInterop.setChoices", Id, apiResult.Response.ToArray(), "value", "label");
        }
    }

    void IDisposable.Dispose()
    {
        JSRuntime.InvokeVoidAsync("simplyChoicesInterop.destroy", Id);
    }
}
